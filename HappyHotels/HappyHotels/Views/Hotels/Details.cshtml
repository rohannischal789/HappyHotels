@model HappyHotels.Models.Hotel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <style>
        .distance-container {
            width: 800px;
            z-index: 1;
        }

            .distance-container > * {
                background-color: rgba(0, 0, 0, 0.5);
                color: #fff;
                font-size: 11px;
                line-height: 18px;
                display: block;
                margin: 0;
                padding: 5px 10px;
                border-radius: 3px;
            }
    </style>
<h2>Details</h2>

<div>
    <hr />

    <dl class="dl-horizontal coordinates">
        <dt>
            @Html.DisplayNameFor(model => model.name)
        </dt>

        <dd class="description">
            @Html.DisplayFor(model => model.name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.address)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.address)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.city)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.city)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.state)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.state)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.country)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.country)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.postcode)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.postcode)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.check_in_time)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.check_in_time)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.check_out_time)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.check_out_time)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.lattitude)
        </dt>

        <dd class="latitude">
            @Html.DisplayFor(model => model.lattitude)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.longitude)
        </dt>

        <dd class="longitude">
            @Html.DisplayFor(model => model.longitude)
        </dd>

    </dl>
    View it on the Map
    <div id='map' style='width: 800px; height: 600px;'>
    </div>
    <div id='distance' class='distance-container'></div>

    <script src='https://api.mapbox.com/mapbox.js/plugins/turf/v2.0.2/turf.min.js'></script>
   
    <script>
        mapboxgl.accessToken = 'pk.eyJ1Ijoicm9oYW5uaXMiLCJhIjoiY2sxMjMwdjZnMDBodTNubXNzNW5oaGp4MiJ9.ukuJhp_z2fKxFKwSlx7miA';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11'
        });


        //     this.geocoder = new GeoCoder({
    //  accessToken: this.accessToken,
    //  placeholder: 'SEARCH GEOGRAPHY ON MAP',
    //  marker: false,
    //  // mapboxgl: this.map,  // use this instead of 'marker: false' if you're going to use markers based on user selection
    //});

        // Add geolocate control to the map.
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));

        var distanceContainer = document.getElementById('distance');

        // GeoJSON object to hold our measurement features
        var geojson = {
            "type": "FeatureCollection",
            "features": []
        };

        // Used to draw a line between points
        var linestring = {
            "type": "Feature",
            "geometry": {
                "type": "LineString",
                "coordinates": []
            }
        };

        map.on('load', function () {
            map.addSource('geojson', {
                "type": "geojson",
                "data": geojson
            });

            // Add styles to the map
            map.addLayer({
                id: 'measure-points',
                type: 'circle',
                source: 'geojson',
                paint: {
                    'circle-radius': 5,
                    'circle-color': '#000'
                },
                filter: ['in', '$type', 'Point']
            });
            map.addLayer({
                id: 'measure-lines',
                type: 'line',
                source: 'geojson',
                layout: {
                    'line-cap': 'round',
                    'line-join': 'round'
                },
                paint: {
                    'line-color': '#000',
                    'line-width': 2.5
                },
                filter: ['in', '$type', 'LineString']
            });

            map.on('click', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });

                // Remove the linestring from the group
                // So we can redraw it based on the points collection
                if (geojson.features.length > 1) geojson.features.pop();

                // Clear the Distance container to populate it with a new value
                distanceContainer.innerHTML = '';

                // If a feature was clicked, remove it from the map
                if (features.length) {
                    var id = features[0].properties.id;
                    geojson.features = geojson.features.filter(function (point) {
                        return point.properties.id !== id;
                    });
                } else {
                    var point = {
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [
                                e.lngLat.lng,
                                e.lngLat.lat
                            ]
                        },
                        "properties": {
                            "id": String(new Date().getTime())
                        }
                    };

                    geojson.features.push(point);
                }

                if (geojson.features.length > 1) {
                    linestring.geometry.coordinates = geojson.features.map(function (point) {
                        return point.geometry.coordinates;
                    });

                    geojson.features.push(linestring);

                    // Populate the distanceContainer with total distance
                    var value = document.createElement('pre');
                    value.textContent = 'Total distance: ' + turf.lineDistance(linestring).toLocaleString() + 'km';
                    distanceContainer.appendChild(value);
                }

                map.getSource('geojson').setData(geojson);
            });
        });

        map.on('mousemove', function (e) {
            var features = map.queryRenderedFeatures(e.point, { layers: ['measure-points'] });
            // UI indicator for clicking/hovering a point on the map
            map.getCanvas().style.cursor = (features.length) ? 'pointer' : 'crosshair';
        });

    </script>
    <br />
    Amenities
    <div class="row">
        @foreach (var item in Model.HotelAmenities)
        {
            <div class="col-lg-2"> @item.Amenity.name </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/mapbox")
}
@if (User.Identity.IsAuthenticated && User.IsInRole("ADMIN"))
{
    <p>
        @Html.ActionLink("Edit", "Edit", new { id = Model.hotel_id })
    </p>
}
<p>
   <a href=@Url.Action("Create", "Bookings")>Make a Booking</a>
</p>
<p>
    <a href=@Url.Action("Create", "HotelRatings")>Add a Review</a>
</p>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>